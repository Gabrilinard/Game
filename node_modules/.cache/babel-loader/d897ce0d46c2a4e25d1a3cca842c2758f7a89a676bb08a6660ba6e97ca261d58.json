{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabri\\\\AppData\\\\Roaming\\\\SecretWord\\\\secretword\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport StartScreen from './components/StartScreen';\nimport { useCallback, useEffect, useState } from 'react';\nimport { wordsList } from \"./data/words\";\nimport Game from './components/Game';\nimport GameOver from './components/GameOver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stages = [{\n  id: 1,\n  name: \"start\"\n}, {\n  id: 2,\n  name: \"game\"\n}, /*Array com cada estágio declarado. Responsável para mandar cada estágio para o return*/\n{\n  id: 3,\n  name: \"end\"\n}];\nfunction App() {\n  _s();\n  //Atributos utilizados na lógica do sistema:\n  const [gameStage, setGameStage] = useState(stages[0].name); /*Ele começa no estágio. Crio duas variáveis para fazer o código e a lógica.*/\n  const [words] = useState(wordsList);\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongLetters, setWrongLetters] = useState([]);\n  const [guesses, setGuesses] = useState(3);\n  const [score, setScore] = useState(0);\n\n  //Funçôes Utilizadas na lógica do sistema:\n\n  //Função para fazer o sorteio do programa\n  const pickWordAndCategory = useCallback(() => {\n    const categories = Object.keys(words);\n    const category = categories[Math.floor(Math.random() * Object.keys(categories).length)]; // Fazer o sorteio da categoria \n    console.log(category);\n    const word = words[category][Math.floor(Math.random() * words[category].length)]; // Fazer o sorteio das palavras de acordo com sua categoria\n\n    console.log(word);\n    return {\n      category,\n      word\n    };\n  }, [words]);\n\n  //Função que vai criar variáveis, separar a palavra, deixar todas as letras minúsculas \n  const startGame = useCallback(() => {\n    clearLettersStates();\n    const {\n      category,\n      word\n    } = pickWordAndCategory(); //Criando as variáveis/atributos palavra e categoria\n\n    let wordLetters = word.split(\"\"); // Separar as palavras letra por letra\n\n    wordLetters = wordLetters.map(l => l.toLowerCase()); // Deixar as letras todas minúsculas\n\n    console.log(word, category);\n    console.log(wordLetters);\n    setPickedCategory(category);\n    setPickedWord(word);\n    setLetters(wordLetters);\n    setGameStage(stages[1].name); /*Quando a pessoa aperta no botão ele passa para o estágio 1.*/\n  }, [pickWordAndCategory]);\n\n  /*Verificando as letras do input*/\n  const verifyLetter = letter => {\n    const normalizedLetter = letter.toLowerCase(); //Colocando todas as letras minúsculas\n\n    if (guessedLetters.includes(normalizedLetter) || wrongLetters.includes(normalizedLetter)) {\n      return; //Conferir se a letra está inclusa ou não no array\n    }\n\n    if (letters.includes(normalizedLetter)) {\n      setGuessedLetters(actualGuessedLetters => [...actualGuessedLetters, letter]);\n    } else {\n      setWrongLetters(actualWrongLetters => [\n      //condicional para ver se a letra tem na palavra ou não\n      ...actualWrongLetters, normalizedLetter]);\n      setGuesses(actualGuesses => actualGuesses - 1);\n    }\n  };\n  const retry = () => {\n    setScore(0);\n    setGuesses(3); //As chances começarem 3, acabar em 0 e começar novamente em 3. \n    setGameStage(stages[0].name); /*Função para resetar o jogo*/\n  };\n\n  const clearLettersStates = () => {\n    setGuessedLetters([]);\n    setWrongLetters([]);\n  };\n\n  //Checar se o usuário perdeu o jogo\n  useEffect(() => {\n    if (guesses === 0) {\n      clearLettersStates(); //Iniciar o jogo zerado\n      setGameStage(stages[2].name);\n    }\n  }, [guesses]);\n\n  //Checar se o usuário ganhou o jogo\n\n  useEffect(() => {\n    const uniqueLetters = [...new Set(letters)];\n    console.log(uniqueLetters);\n    console.log(guessedLetters);\n\n    // win condition\n    if (guessedLetters.length === uniqueLetters.length) {\n      // add score\n      setScore(actualScore => actualScore += 100);\n\n      // restart game with new word\n      startGame();\n    }\n  }, [guessedLetters, letters, startGame]);\n\n  //Parte que vai receber os atributos para mandar para cada componente específico \n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [gameStage === \"start\" && /*#__PURE__*/_jsxDEV(StartScreen, {\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 33\n    }, this), \" \", gameStage === \"game\" && /*#__PURE__*/_jsxDEV(Game, {\n      verifyLetter: verifyLetter,\n      pickedWord: pickedWord,\n      pickedCategory: pickedCategory,\n      letters: letters,\n      guessedLetters: guessedLetters,\n      wrongLetters: wrongLetters,\n      guesses: guesses,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 32\n    }, this), \" \", gameStage === \"end\" && /*#__PURE__*/_jsxDEV(GameOver, {\n      retry: retry,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 31\n    }, this), \"  \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OVFP6UZ8JOWVVMoS+3RdQ6uwNa8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["StartScreen","useCallback","useEffect","useState","wordsList","Game","GameOver","jsxDEV","_jsxDEV","stages","id","name","App","_s","gameStage","setGameStage","words","pickedWord","setPickedWord","pickedCategory","setPickedCategory","letters","setLetters","guessedLetters","setGuessedLetters","wrongLetters","setWrongLetters","guesses","setGuesses","score","setScore","pickWordAndCategory","categories","Object","keys","category","Math","floor","random","length","console","log","word","startGame","clearLettersStates","wordLetters","split","map","l","toLowerCase","verifyLetter","letter","normalizedLetter","includes","actualGuessedLetters","actualWrongLetters","actualGuesses","retry","uniqueLetters","Set","actualScore","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gabri/AppData/Roaming/SecretWord/secretword/src/App.js"],"sourcesContent":["import './App.css';\nimport StartScreen from './components/StartScreen';\nimport { useCallback, useEffect, useState } from 'react';\nimport { wordsList } from \"./data/words\";\nimport Game from './components/Game';\nimport GameOver from './components/GameOver'\n\nconst stages = [\n  {id: 1, name: \"start\"},\n  {id: 2, name: \"game\"},      /*Array com cada estágio declarado. Responsável para mandar cada estágio para o return*/\n  {id: 3, name: \"end\"},\n];\n\nfunction App() {\n  //Atributos utilizados na lógica do sistema:\n  const [gameStage, setGameStage] = useState(stages[0].name) /*Ele começa no estágio. Crio duas variáveis para fazer o código e a lógica.*/\n  const [words] = useState(wordsList)\n\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n\n  const[guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongLetters, setWrongLetters] = useState([]);\n  const [guesses, setGuesses] = useState(3);\n  const [score, setScore] = useState(0)\n\n  //Funçôes Utilizadas na lógica do sistema:\n\n      //Função para fazer o sorteio do programa\n  const pickWordAndCategory = useCallback(() => {\n    const categories = Object.keys(words);\n\n    const category = categories[Math.floor(Math.random() * Object.keys(categories).length)] // Fazer o sorteio da categoria \n    console.log(category)\n\n    const word = words[category][Math.floor(Math.random() * words[category].length)]; // Fazer o sorteio das palavras de acordo com sua categoria\n\n    console.log(word)\n    \n\n    return{category,word}\n  }, [words]);\n\n      //Função que vai criar variáveis, separar a palavra, deixar todas as letras minúsculas \n  const startGame = useCallback(() => {\n    clearLettersStates();\n\n    const {category, word} = pickWordAndCategory(); //Criando as variáveis/atributos palavra e categoria\n\n    let wordLetters = word.split(\"\"); // Separar as palavras letra por letra\n\n    wordLetters = wordLetters.map((l) => l.toLowerCase()); // Deixar as letras todas minúsculas\n\n    console.log(word, category);\n    console.log(wordLetters);\n\n    setPickedCategory(category)\n    setPickedWord(word)\n    setLetters(wordLetters)\n\n    setGameStage(stages[1].name)  /*Quando a pessoa aperta no botão ele passa para o estágio 1.*/\n  }, [pickWordAndCategory]);\n\n  /*Verificando as letras do input*/\n  const verifyLetter = (letter) => {\n    const normalizedLetter = letter.toLowerCase();   //Colocando todas as letras minúsculas\n\n    if(guessedLetters.includes(normalizedLetter) || wrongLetters.includes(normalizedLetter)) {\n      return;                                                            //Conferir se a letra está inclusa ou não no array\n    } \n\n    if(letters.includes(normalizedLetter)) {\n      setGuessedLetters((actualGuessedLetters) => [\n        ...actualGuessedLetters, \n        letter,\n      ])\n    } else {\n      setWrongLetters((actualWrongLetters) => [    //condicional para ver se a letra tem na palavra ou não\n        ...actualWrongLetters, \n        normalizedLetter,\n      ]);\n\n      setGuesses((actualGuesses) => actualGuesses - 1);\n     }\n  }\n\n  const retry = () => {\n    setScore(0);\n    setGuesses(3);   //As chances começarem 3, acabar em 0 e começar novamente em 3. \n    setGameStage(stages[0].name) /*Função para resetar o jogo*/\n  }\n\n  const clearLettersStates = () => {\n    setGuessedLetters([]);\n    setWrongLetters([]);\n  };\n\n\n    //Checar se o usuário perdeu o jogo\n  useEffect(() => {\n    if (guesses === 0) {\n      clearLettersStates();     //Iniciar o jogo zerado\n      setGameStage(stages[2].name);\n    }\n    }, [guesses]);  \n\n    //Checar se o usuário ganhou o jogo\n\n    useEffect(() => {\n      const uniqueLetters = [...new Set(letters)];\n  \n      console.log(uniqueLetters);\n      console.log(guessedLetters);\n  \n      // win condition\n      if (guessedLetters.length === uniqueLetters.length) {\n        // add score\n        setScore((actualScore) => (actualScore += 100));\n  \n        // restart game with new word\n        startGame();\n      }\n    }, [guessedLetters, letters, startGame]);\n\n  //Parte que vai receber os atributos para mandar para cada componente específico \n  return (\n    <div className=\"App\">\n      {gameStage === \"start\" && <StartScreen startGame={startGame} />} {/* Parte antes de iniciar o jogo(pagina inicial) */}\n\n\n    {/*Recebendo os atributos de game*/}\n      {gameStage === \"game\" && <Game verifyLetter={verifyLetter} \n      pickedWord = {pickedWord} \n      pickedCategory = {pickedCategory} \n      letters = {letters}                    \n      guessedLetters = {guessedLetters} \n      wrongLetters = {wrongLetters} \n      guesses = {guesses} \n      score = {score} />} {/*Parte do jogo em si */}\n\n      {gameStage === \"end\" && <GameOver retry={retry} score={score}/>}  {/* Parte de quando o usuário perde */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}