{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabri\\\\AppData\\\\Roaming\\\\SecretWord\\\\secretword\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport StartScreen from './components/StartScreen';\nimport { useCallback, useEffect, useState } from 'react';\nimport { wordsList } from \"./data/words\";\nimport Game from './components/Game';\nimport GameOver from './components/GameOver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stages = [{\n  id: 1,\n  name: \"start\"\n}, {\n  id: 2,\n  name: \"game\"\n}, /*Array com cada estágio declarado.*/\n{\n  id: 3,\n  name: \"end\"\n}];\nfunction App() {\n  _s();\n  const [gameStage, setGameStage] = useState(stages[0].name); /*Ele começa no estágio. Crio duas variáveis para fazer o código e a lógica.*/\n  const [words] = useState(wordsList);\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongLetters, setWrongLetters] = useState([]);\n  const [guesses, setGuesses] = useState(3);\n  const [score, setScore] = useState(0);\n  const pickWordAndCategory = () => {\n    const categories = Object.keys(words);\n    const category = categories[Math.floor(Math.random() * Object.keys(categories).length)]; // Fazer o sorteio da categoria \n    console.log(category);\n    const word = words[category][Math.floor(Math.random() * words[category].length)]; // Fazer o sorteio das palavras de acordo com sua categoria\n\n    console.log(word);\n    return {\n      word,\n      category\n    };\n  };\n  const startGame = () => {\n    const {\n      word,\n      category\n    } = pickWordAndCategory(); //Criando as variáveis/atributos palavra e categoria\n\n    let wordLetters = word.split(\"\"); // Separar as palavras letra por letra\n\n    wordLetters = wordLetters.map(l => l.toLowerCase()); // Deixar as letras todas minúsculas\n\n    console.log(word, category);\n    console.log(wordLetters);\n    setPickedWord(word);\n    setPickedCategory(category);\n    setLetters(letters);\n    setGameStage(stages[1].name); /*Quando a pessoa aperta no botão ele passa para o estágio 1.*/\n  };\n\n  const verifyLetter = () => {\n    setGameStage(stages[2].name); /*Verificando as letras do input*/\n  };\n\n  const retry = () => {\n    setGameStage(stages[0].name); /*Função para resetar o jogo*/\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [gameStage === \"start\" && /*#__PURE__*/_jsxDEV(StartScreen, {\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 33\n    }, this), \" \", gameStage === \"game\" && /*#__PURE__*/_jsxDEV(Game, {\n      verifyLetter: verifyLetter,\n      pickedWord: pickedWord,\n      pickedCategory: pickedCategory,\n      letters: letters,\n      guessedLetters: guessedLetters,\n      wrongLetters: wrongLetters,\n      guesses: guesses,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 32\n    }, this), gameStage === \"end\" && /*#__PURE__*/_jsxDEV(GameOver, {\n      retry: retry\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 31\n    }, this), \"  \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"sdpDuVua5ZG5nxfNnGUM/YUkGpc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["StartScreen","useCallback","useEffect","useState","wordsList","Game","GameOver","jsxDEV","_jsxDEV","stages","id","name","App","_s","gameStage","setGameStage","words","pickedWord","setPickedWord","pickedCategory","setPickedCategory","letters","setLetters","guessedLetters","setGuessedLetters","wrongLetters","setWrongLetters","guesses","setGuesses","score","setScore","pickWordAndCategory","categories","Object","keys","category","Math","floor","random","length","console","log","word","startGame","wordLetters","split","map","l","toLowerCase","verifyLetter","retry","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gabri/AppData/Roaming/SecretWord/secretword/src/App.js"],"sourcesContent":["import './App.css';\nimport StartScreen from './components/StartScreen';\nimport { useCallback, useEffect, useState } from 'react';\nimport { wordsList } from \"./data/words\";\nimport Game from './components/Game';\nimport GameOver from './components/GameOver'\n\nconst stages = [\n  {id: 1, name: \"start\"},\n  {id: 2, name: \"game\"},      /*Array com cada estágio declarado.*/\n  {id: 3, name: \"end\"},\n]\n\nfunction App() {\n  const [gameStage, setGameStage] = useState(stages[0].name) /*Ele começa no estágio. Crio duas variáveis para fazer o código e a lógica.*/\n  const [words] = useState(wordsList)\n\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n  const[guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongLetters, setWrongLetters] = useState([]);\n  const [guesses, setGuesses] = useState(3);\n  const [score, setScore] = useState(0)\n\n  const pickWordAndCategory = () => {\n    const categories = Object.keys(words);\n\n    const category = categories[Math.floor(Math.random() * Object.keys(categories).length)] // Fazer o sorteio da categoria \n    console.log(category)\n\n    const word = words[category][Math.floor(Math.random() *  words[category].length)] // Fazer o sorteio das palavras de acordo com sua categoria\n\n    console.log(word)\n    \n\n    return{word,category}\n  }\n\n  \n\n  const startGame = () => {\n    const {word, category} = pickWordAndCategory(); //Criando as variáveis/atributos palavra e categoria\n\n    let wordLetters = word.split(\"\"); // Separar as palavras letra por letra\n\n    wordLetters = wordLetters.map((l) => l.toLowerCase()); // Deixar as letras todas minúsculas\n\n    console.log(word, category);\n    console.log(wordLetters);\n\n    setPickedWord(word)\n    setPickedCategory(category)\n    setLetters(letters)\n\n    setGameStage(stages[1].name)  /*Quando a pessoa aperta no botão ele passa para o estágio 1.*/\n  }\n\n  const verifyLetter = () => {\n    setGameStage(stages[2].name)   /*Verificando as letras do input*/\n  }\n\n  const retry = () => {\n    setGameStage(stages[0].name) /*Função para resetar o jogo*/\n  }\n\n  return (\n    <div className=\"App\">\n      {gameStage === \"start\" && <StartScreen startGame={startGame} />} {/* Parte antes de iniciar o jogo(pagina inicial) */}\n\n      {gameStage === \"game\" && <Game verifyLetter={verifyLetter} \n      pickedWord = {pickedWord} \n      pickedCategory = {pickedCategory} \n      letters = {letters}                    \n      guessedLetters = {guessedLetters} \n      wrongLetters = {wrongLetters} \n      guesses = {guesses} \n      score = {score} />\n      }\n\n      {gameStage === \"end\" && <GameOver retry={retry}/>}  {/* Parte de quando o usuário perde */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}